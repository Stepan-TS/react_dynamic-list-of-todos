{"version":3,"sources":["types/TodosFilterType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","types/ErrorType.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","components/LoadingError/LoadingError.tsx","App.tsx","helpers/index.tsx","index.tsx"],"names":["TodosFilterType","TodoList","props","todos","selectedTodoId","setSelectedTodoId","isSelectedTodoId","todoId","className","map","id","title","completed","classNames","type","onClick","TodoFilter","changeFilterBy","query","changeQuery","onClearField","onChange","event","target","value","Default","Active","Completed","placeholder","trim","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","response","ok","Error","status","statusText","json","LoadError","Loader","TodoModal","closeModal","todo","useState","user","setUsers","loading","setLoading","useEffect","userId","catch","finally","href","email","name","LoadingError","text","App","setTodos","showTodoModal","setShowTodoModal","selectedTodo","setSelectedTodo","filterBy","setFilterBy","setQuery","isLoading","isSetLoading","isLoadingError","isSetLoadingError","visibleTodos","sortBy","filter","filterByTodoStatus","toLocaleUpperCase","includes","filterByTitle","selectTodo","find","shouldShowTodoModal","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3bdf761b.chunk.js","sourcesContent":["export enum TodosFilterType {\n  Default = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodoId: number,\n  setSelectedTodoId: (todoId: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const {\n    todos,\n    selectedTodoId,\n    setSelectedTodoId,\n  } = props;\n\n  const isSelectedTodoId = (todoId: number) => {\n    return selectedTodoId !== todoId;\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n      {todos.map(({ id, title, completed }) => (\n        <tbody key={id}>\n          <tr data-cy=\"todo\" className=\"todo\">\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                {\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                },\n              )}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setSelectedTodoId(id)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames(\n                    'far',\n                    {\n                      'fa-eye': isSelectedTodoId(id),\n                      'fa-eye-slash': !isSelectedTodoId(id),\n                    },\n                  )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      ))}\n    </table>\n  );\n};\n","import { ChangeEvent, Dispatch, SetStateAction } from 'react';\nimport { TodosFilterType } from '../../types/TodosFilterType';\n\ntype Props = {\n  changeFilterBy: Dispatch<SetStateAction<TodosFilterType>>;\n  query: string;\n  changeQuery: Dispatch<SetStateAction<string>>;\n  onClearField: () => void;\n};\n\nexport const TodoFilter: React.FC<Props> = (props) => {\n  const {\n    changeFilterBy,\n    query,\n    changeQuery,\n    onClearField,\n  } = props;\n\n  const handleTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n    changeQuery(event.target.value.trim());\n  };\n\n  const handleChangeFilterType = (event: ChangeEvent<HTMLSelectElement>) => {\n    changeFilterBy(event.target.value as TodosFilterType);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            onChange={handleChangeFilterType}\n            data-cy=\"statusSelect\"\n          >\n            <option value=\"all\">\n              {TodosFilterType.Default}\n            </option>\n\n            <option value=\"active\">\n              {TodosFilterType.Active}\n            </option>\n\n            <option value=\"completed\">\n              {TodosFilterType.Completed}\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleTextChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"clear field\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={onClearField}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum LoadError {\n  LoadingError = 'An error occured when loading goods!',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  closeModal: () => void;\n  todo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ closeModal, todo }) => {\n  const [user, setUsers] = useState<User>();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getUser(todo.userId)\n      .then(setUsers)\n      .catch(() => setLoading(true))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading\n        ? (<Loader />)\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo?.id}`}\n              </div>\n\n              <button\n                type=\"button\"\n                aria-label=\"close modal\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={closeModal}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo?.title}\n              </p>\n\n              {user && (\n                <p className=\"block\" data-cy=\"modal-user\">\n                  <strong className={classNames(\n                    {\n                      'has-text-danger': !todo.completed,\n                      'has-text-success': todo.completed,\n                    },\n                  )}\n                  >\n                    {todo?.completed\n                      ? 'Done'\n                      : 'Planned'}\n                  </strong>\n                  {' by '}\n\n                  <a href={`mailto:${user?.email}`}>\n                    {user?.name}\n                  </a>\n                </p>\n              )}\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import './LoadingError.scss';\n\ntype Props = {\n  text: string;\n};\n\nexport const LoadingError: React.FC<Props> = (props) => (\n  <div className=\"error\">\n    <p className=\"error-text\">\n      {props.text}\n    </p>\n  </div>\n);\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { filterByTitle, filterByTodoStatus } from './helpers';\nimport { Loader } from './components/Loader';\nimport { LoadError } from './types/ErrorType';\nimport { LoadingError } from './components/LoadingError/LoadingError';\nimport { TodosFilterType } from './types/TodosFilterType';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [showTodoModal, setShowTodoModal] = useState(false);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filterBy, setFilterBy] = useState(TodosFilterType.Default);\n  const [query, setQuery] = useState('');\n  const [isLoading, isSetLoading] = useState(false);\n  const [isLoadingError, isSetLoadingError] = useState(false);\n\n  useEffect(() => {\n    isSetLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .catch(() => isSetLoadingError(true))\n      .finally(() => isSetLoading(false));\n  }, []);\n\n  let visibleTodos = filterByTodoStatus(todos, filterBy);\n\n  visibleTodos = filterByTitle(visibleTodos, query);\n\n  useEffect(() => {\n    const selectTodo = visibleTodos.find(todo => todo.id === selectedTodoId);\n\n    if (selectTodo) {\n      setSelectedTodo(selectTodo);\n      setShowTodoModal(true);\n    }\n  }, [selectedTodoId]);\n\n  const closeTodoModal = () => {\n    setSelectedTodoId(0);\n    setShowTodoModal(false);\n  };\n\n  const handleClearField = () => {\n    setQuery('');\n  };\n\n  const shouldShowTodoModal = selectedTodo && showTodoModal;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                changeFilterBy={setFilterBy}\n                query={query}\n                changeQuery={setQuery}\n                onClearField={handleClearField}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (<Loader />)\n                : (\n                  <>\n                    {isLoadingError\n                      ? <LoadingError text={LoadError.LoadingError} />\n                      : (\n                        <TodoList\n                          todos={visibleTodos}\n                          selectedTodoId={selectedTodoId}\n                          setSelectedTodoId={setSelectedTodoId}\n                        />\n                      )}\n                  </>\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {shouldShowTodoModal && (\n        <TodoModal\n          closeModal={closeTodoModal}\n          todo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport function filterByTitle(todos: Todo[], title: string) {\n  return todos.filter(todo => todo.title.toLocaleUpperCase()\n    .includes(title.toLocaleUpperCase()));\n}\n\nexport function filterByTodoStatus(todos: Todo[], sortBy: string) {\n  return todos.filter(todo => {\n    switch (sortBy) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return todo;\n    }\n  });\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}